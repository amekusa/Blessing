/*
Utility

styleguide: mixins.util
*/

/*
.for

Performs numerical iteration.

less:
// Iterates from 2 to 4
.for(2; 4; {
	.each(@i) {
		h@{i} {
			color: aquamarine;
		}
	}
});
---
// Iterates from 6 to 4
.for(6; 4; {
	.each(@i) {
		h@{i} {
			font-weight: normal;
		}
	}
});
---
// Nested iterations
.for(1; 2; {
	.each(@i) {
		.for(1; 2; {
			.each(@j) {
				.item-@{i}-@{j} {
					i: @i;
					j: @j;
				}
			}
		});
	}
});

@from <integer> - The number of the iteration count starts at
@to <integer> - The number of the iteration count ends at
@ruleset <ruleset> - The ruleset invoked with each iteration

styleguide: mixins.util.for
*/
.for(@from; @to; @ruleset) {
	@ruleset();
	.each(@from);
	
	& when not(@from = @to) {
		.for(@from + ((@to - @from) / abs(@to - @from)); @to; @ruleset);
	}
}

/*
.for (List)

Performs iteration over a list.

less:
.box {
	.for(left right bottom; {
		.each(@i) {
			border-@{i}: 8px solid DeepSkyBlue;
		}
	});
}

@values <any[*]> - A list of values
@ruleset <ruleset> - A ruleset to invoke

styleguide: mixins.util.for-list
*/
.for(@values; @ruleset) {
	
	.for(1; length(@values); {
		.each(@i) {
			@ruleset();
			.each(extract(@values, @i));
		}
	});
}

/*
.prefix

Adds vendor-prefixes to a property.

less:
// All prefixes
.box {
	.prefix(transition; all .5s);
}

@prop <property> - The property to be prefixised
@value <any> - The value of the property
@prefixes <string[*]> [moz webkit o ms] - The list of prefixes [default: moz webkit o ms]

styleguide: mixins.util.prefix
*/
.prefix(@prop; @value; @prefixes: moz webkit o ms) {
	
	.for(@prefixes; {
		.each(@i) {
			-@{i}-@{prop}: @value;
		}
	});
}

/*
.prepend

Creates a pseudo element at `::before`.

less:
.box {
	.prepend({
		display: inline-block;
		width: 16px;
		height: 16px;
		background-color: Red;
	});
}

@ruleset <ruleset> - The ruleset to apply for `::before`

styleguide: mixins.util.prepend
*/
.prepend(@ruleset) {
	
	.before({
		content: "";
		@ruleset();
	});
}

/*
.prepend (Display)

Creates a pseudo element at `::before` with specific `display` property.

less:
.box {
	.prepend(block; {
		width: 16px;
		height: 16px;
		background-color: Red;
	});
}

@display <display> - The `display` property of `::before`
@ruleset <ruleset> - The ruleset to apply for `::before`

styleguide: mixins.util.prepend-display
*/
.prepend(@display; @ruleset) {
	
	.prepend({
		.display(@display);
		@ruleset();
	});
}

/*
.append

Creates a pseudo element at `::after`.

less:
.box {
	.append({
		display: inline-block;
		width: 16px;
		height: 16px;
		background-color: Blue;
	});
}

@ruleset <ruleset> - The ruleset to apply for `::after`

styleguide: mixins.util.append
*/
.append(@ruleset) {
	
	.after({
		content: "";
		@ruleset();
	});
}

/*
.append (Display)

Creates a pseudo element at `::after` with specific `display` property.

less:
.box {
	.append(block; {
		width: 16px;
		height: 16px;
		background-color: Blue;
	});
}

@display <display> - The `display` property of `::after`
@ruleset <ruleset> - The ruleset to apply for `::after`

styleguide: mixins.util.append-display
*/
.append(@display; @ruleset) {
	
	.append({
		.display(@display);
		@ruleset();
	});
}

/*
.eval

Evaluates a script

[FIXME] Nested call unsupported

@script <string> - The JavaScript expression
@ruleset <ruleset> - The ruleset invoked after the evaluation

styleguide: mixins.util.xxx.eval
*/
.eval(@script; @ruleset) {
	@_ruleset: {
		@_script: e(@script);
		@return: e(`(function(){@{_script};})()`);
		@ruleset();
	};
	@_ruleset();
}
