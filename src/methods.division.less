/**
 * Blessing / Methods / Division
 */

@import (reference) "variables.less";

.clearfix(@dir: both) {
	
	&:before,
	&:after {
		content: "";
	}
	
	&:before {
		display: table; // Disable top-margin collapsing
			// @link http://nicolasgallagher.com/micro-clearfix-hack/
	}
	
	&:after {
		display: block;
		
		& when (@dir = l), (@dir = left) {
			clear: left;
		}
		
		& when (@dir = r), (@dir = right) {
			clear: right;
		}
		
		& when (@dir = both), (@dir = lr) {
			clear: both;
		}
	}
	
	& when not(@compat < @compat-ie7) {
		zoom: 1;
	}
}

.rows(@nrows: uncertain; @gutter: @base-margin) {
	
	> * {
		display: block;
		margin-top: 0;
		margin-bottom: 0;
		
		+ * {
			margin-top: @gutter;
		}
	}
}

/**
 * Makes multi-column layout
 *
 * @param ncols <integer> A number of columns
 * @param gutter <length>
 * @param inset <length>
 * @param arrange ltr|rtl Columns arrangement direction
 */
.cols(@ncols: uncertain; @gutter: @base-margin; @inset: auto; @arrange: ltr) {
	
	& when (@arrange = ltr) {
		.clearfix(l);
	}
	
	& when (@arrange = rtl) {
		.clearfix(r);
	}
	
	& when (isnumber(@inset)) { // Specific inset
		
		// Horizontal
		
		& when (@inset < (@gutter * .5)) { // Inset < Gutter
			.pad-x(0);
			.mgn-x(@inset - (@gutter * .5));
		}
		
		& when (@inset > (@gutter * .5)) { // Inset > Gutter
			.pad-x(@inset - (@gutter * .5));
			.mgn-x(0);
		}
		
		// Vertical
		
		& when (@inset < 0) {
			.pad-y(0);
			.mgn-y(@inset);
		}
		
		& when (@inset >= 0) {
			.pad-y(@inset);
			.mgn-y(0);
		}
	}
	
	& when not(isnumber(@inset)) {
		.pad-x(@gutter * .5);
		.pad-y(@gutter);
	}
	
	+ * {
		
		& when (@arrange = ltr) {
			clear: left;
		}
		
		& when (@arrange = rtl) {
			clear: right;
		}
	}
	
	> * {
		position: relative;
		display: block;
		min-height: 1px;
		.pad-x(@gutter * .5);
		.pad-y(0);
		
		& when (@arrange = ltr) {
			float: left;
		}
		
		& when (@arrange = rtl) {
			float: right;
		}
		
		& when (length(@ncols) > 1) {
			@n: length(@ncols); // A number of columns
			@m: @n + 1;
			
			&:nth-child(n+@{m}) { // Wrapped columns
				padding-top: @gutter;
			}
			
			.for(1; @n); .each(@i) {
				
				&:nth-child(@{n}n+@{i}) { // Each column
					@w: extract(@ncols, @i);
					
					& when (isnumber(@w)) {
						
						& when (ispercentage(@w)) {
							width: @w;
							box-sizing: border-box;
						}
						
						& when not(ispercentage(@w)) {
							width: @w;
							box-sizing: content-box;
						}
					}
				}
			}
		}
		
		& when (length(@ncols) = 1) {
			
			& when (isnumber(@ncols)) {
				@m: @ncols + 1;
				
				&:nth-child(n+@{m}) { // Wrapped columns
					padding-top: @gutter;
				}
				
				&:nth-child(@{ncols}n+@{m}) { // Wrapping points
					
					& when (@arrange = ltr) {
						clear: left;
					}
					
					& when (@arrange = rtl) {
						clear: right;
					}
				}
				
				& when (@compat < @compat-ie7) {
					width: 100% / @ncols;
				}
				
				& when not(@compat < @compat-ie7) {
					width: 99.99% / @ncols; // Avoid columns dropping
				}
			}
			
			& when not(isnumber(@ncols)) { // Uncertain of a number of columns
				
				.for(1; 12); .each(@i) { // 1 - 12 columns
					
					&:first-child {
						
						&:nth-last-child(@{i}),
						&:nth-last-child(@{i}) ~ * {
							
							& when (@compat < @compat-ie7) {
								width: 100% / @i;
							}
							
							& when not(@compat < @compat-ie7) {
								width: 99.99% / @i;
							}
						}
					}
				}
			}
		}
	}
}

/**
 * Generates classes: cols-2, cols-3, ... cols-{max-ncols}
 */
.cols-n(@max-ncols: 12) when (@max-ncols > 1) {
	.cols-n(@max-ncols - 1);
	
	.cols-@{max-ncols} {
		.cols(@max-ncols);
	}
}

.cols-dyad(@w1: auto; @w2: auto; @gutter: @base-margin; @arrange: ltr) {
	.cols (@arrange: @arrange);
	
	> * {
		
		&:first-child,
		&:nth-child(odd) {
			width: @w1;
		}
		
		&:last-child,
		&:nth-child(even) {
			width: @w2;
		}
	}
}
.-2-cols (
		@w1: auto,
		@w2: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when (@arrange = ltr) {
	
	> * {
		@x: @gutter / 2;
		
		&:first-child,
		&:nth-child(odd) {
			margin-right: @x;
		}
		
		&:last-child,
		&:nth-child(even) {
			margin-left: @x;
		}
	}
}
.-2-cols (
		@w1: auto,
		@w2: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when (@arrange = rtl) {
	
	> * {
		@x: @gutter / 2;
		
		&:first-child,
		&:nth-child(odd) {
			margin-right: @x;
		}
		
		&:last-child,
		&:nth-child(even) {
			margin-left: @x;
		}
	}
}

/*
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr) {
	
	display: block;
	.clearfix;
	
	> * {
		display: block;
		min-height: 1px; // Prevents collapsing width while no any content in the column.
		.-naked;
		
		> .content {
			display: block;
			margin: 0;
			.-h-padding(@gutter / 2);
		}
	}
}
// ## 2 columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-num-cols = 2) {
	
	> * {
		width: 100% / 2;
		
		&:first-child,
		&:nth-child(odd) {
			
			> * {
				margin-right: @gutter / 2;
			}
			
			> .content {
				.-h-padding(0, @gutter / 2);
			}
		}
		
		&:last-child,
		&:nth-child(even) {
			
			> * {
				margin-left: @gutter / 2;
			}
			
			> .content {
				.-h-padding(@gutter / 2, 0);
			}
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
}
// ## 3 columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-num-cols = 3) {
	
	> * {
		width: 100% / 3;
		
		> .content {
			.-h-padding(@gutter / 3);
		}
		
		&:first-child,
		&:nth-child(3n-1) {
			> .content {
				.-h-padding(0, @gutter * 2 / 3);
			}
		}
		
		&:last-child,
		&:nth-child(3n+1) {
			> .content {
				.-h-padding(@gutter * 2 / 3, 0);
			}
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}	
}
// ## Equal-height columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-cols-height-equation = equal) {
	
	> * {
		height: 100%;
		
		> .content {
			height: 100%;
		}
	}
}
// ## Arrange columns as left to right
.cols(@-num-cols: auto, @-cols-height-equation: auto, @gutter: @base-margin,
		@arrange: ltr) when (@arrange = ltr) {
	
	> * {
		float: left;
	}
}
// ## Arrange columns as right to left
.cols(@-num-cols: auto, @-cols-height-equation: auto, @gutter: @base-margin,
		@arrange: ltr) when (@arrange = rtl) {
	
	> * {
		float: right;
	}
}
// Compatible with lte IE 7 & gt IE 6
.cols(@gutter: @base-margin, @-direction: left, @-compatibility: @compat) when (@-compatibility >= @compat-ie7), (@-compatibility < @compat-ie6) {
	
	&.dyad > * {
		
		&.first-child > .content {
			.-h-padding(0, @gutter / 2);
		}
		
		&.last-child > .content {
			.-h-padding(@gutter / 2, 0);
		}
	}
	
	&.triad > * {
		
		&.first-child > .content {
			.-h-padding(0, @gutter * 2 / 3);
		}
		
		&.last-child > .content {
			.-h-padding(@gutter * 2 / 3, 0);
		}
	}
}
// Compatible with lte IE 6
.cols(@gutter: @base-margin, @-direction: left, @-compatibility: @compat) when (@-compatibility >= @compat-ie6) {
	
	.col {
		display: block;
		float: @-direction;
		min-height: 1px;
		
		.content {
			display: block;
			.-h-padding(@gutter / 2);
		}
	}
	
	&.dyad .col {
		width: 100% / 2;
		
		&.first-child .content {
			.-h-padding(0, @gutter / 2);
		}
		
		&.last-child .content {
			.-h-padding(@gutter / 2, 0);
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
	
	&.triad .col {
		width: 100% / 3;
		
		.content {
			.-h-padding(@gutter / 3);
		}
		
		&.first-child .content {
			.-h-padding(0, @gutter * 2 / 3);
		}
		
		&.last-child .content {
			.-h-padding(@gutter * 2 / 3, 0);
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}
}

.-rows(@gutter: @base-margin) {
	display: block;
	
	> .cell,
	> .row {
		display: block;
		min-width: 1px;
		
		> .content {
			display: block;
			position: absolute;
			top: 0;
			bottom: 0;
			.-v-padding(@gutter / 2);
		}
	}
	
	&.dyad > .cell,
	&.dyad > .row {
		width: 100% / 2;
		
		&:first-child > .content {
			.-v-padding(0, @gutter / 2);
		}
		
		&:last-child > .content {
			.-v-padding(@gutter / 2, 0);
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
	
	&.triad > .cell,
	&.triad > .row {
		width: 100% / 3;
		
		> .content {
			.-v-padding(@gutter / 3);
		}
		
		&:first-child > .content {
			.-v-padding(0, @gutter * 2 / 3);
		}
		
		&:last-child > .content {
			.-v-padding(@gutter * 2 / 3, 0);
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}
}

// ## Horizontal array
.-h-array(@-num-items, @-item-margin: 0) {
	display: block;
	.clearfix;
	
	> * {
		display: block;
		float: left;
		width: 100% / @-num-items;
		
		> .content {
			padding-left: @-item-margin / 2;
			padding-right: @-item-margin / 2;
		}
	}
}
*/

/**
 * Table
 *
 * @param gutter <length>[ <length>] Gutter width
 * @param inset <length>[ <length>] Inset width
 */
.table(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	display: table;
	direction: @arrange;
	table-layout: @layout;
	
	& when (length(@gutter) = 1) {
		margin: -(@gutter - @inset);
		
		& when (unit(@gutter) = 0) {
			border-collapse: collapse;
		}
		
		& when not(unit(@gutter) = 0) {
			border-collapse: separate;
			border-spacing: @gutter;
		}
	}
	
	& when (length(@gutter) > 1) {
		@gutter-x: extract(@gutter, 1);
		@gutter-y: extract(@gutter, 2);
		
		& when (length(@inset) > 1) {
			@inset-x: extract(@inset, 1);
			@inset-y: extract(@inset, 2);
			margin: -(@gutter-y - @inset-y) -(@gutter-x - @inset-x);
		}
		
		& when (length(@inset) = 1) {
			margin: -(@gutter-y - @inset) -(@gutter-x - @inset);
		}
		
		& when (unit(@gutter-x) = 0) and (unit(@gutter-y) = 0) {
			border-collapse: collapse;
		}
		
		& when not(unit(@gutter-x) = 0) and not(unit(@gutter-y) = 0) {
			border-collapse: separate;
			border-spacing: @gutter-x @gutter-y;
		}
	}
}

/**
 * Horizontal Cells
 */
.h-cells(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	.table(@gutter: @gutter; @inset: @inset; @arrange: @arrange; @layout: @layout);
	
	> * { // Cell
		display: table-cell;
		direction: initial;
	}
}

/**
 * Cell Table
 */
.cell-table(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	.table(@gutter: @gutter; @inset: @inset; @arrange: @arrange; @layout: @layout);
	
	> * { // Row
		display: table-row;
		
		> * { // Cell
			display: table-cell;
			direction: initial;
		}
	}
}
