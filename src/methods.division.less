/**
 * Blessing / Methods / Division
 */

@import (reference) "variables.less";

.clearfix(@dir: both) {
	
	&:before,
	&:after {
		content: "";
	}
	
	&:before {
		display: table; // Disable top-margin collapsing
			// @link http://nicolasgallagher.com/micro-clearfix-hack/
	}
	
	&:after {
		display: block;
		
		& when (@dir = l), (@dir = left) {
			clear: left;
		}
		
		& when (@dir = r), (@dir = right) {
			clear: right;
		}
		
		& when (@dir = both), (@dir = lr) {
			clear: both;
		}
	}
	
	& when not(@compat < @compat-ie7) {
		zoom: 1;
	}
}

.rows(@nrows: uncertain; @gutter: @base-margin) {
	
	> * {
		display: block;
		margin-top: 0;
		margin-bottom: 0;
		
		+ * {
			margin-top: @gutter;
		}
	}
}

/**
 * Makes multi-column layout
 *
 * @param ncols <integer> A number of columns
 * @param gutter <length>
 * @param inset <length>
 * @param arrange ltr|rtl Columns arrangement direction
 */
.cols(@ncols: uncertain; @gutter: @base-margin; @inset: auto; @arrange: ltr) {
	
	& when (@arrange = ltr) {
		.clearfix(l);
	}
	
	& when (@arrange = rtl) {
		.clearfix(r);
	}
	
	& when (isnumber(@inset)) { // Specific inset
		
		// Horizontal
		
		& when (@inset < (@gutter * .5)) { // Inset < Gutter
			.pad-x(0);
			.mgn-x(@inset - (@gutter * .5));
		}
		
		& when (@inset > (@gutter * .5)) { // Inset > Gutter
			.pad-x(@inset - (@gutter * .5));
			.mgn-x(0);
		}
		
		// Vertical
		
		& when (@inset < 0) {
			.pad-y(0);
			.mgn-y(@inset);
		}
		
		& when (@inset >= 0) {
			.pad-y(@inset);
			.mgn-y(0);
		}
	}
	
	& when not(isnumber(@inset)) {
		.pad-x(@gutter * .5);
		.pad-y(@gutter);
	}
	
	// Each column
	
	> * {
		position: relative;
		display: block;
		min-height: 1px;
		.pad-x(@gutter * .5);
		.pad-y(0);
		
		& when (@arrange = ltr) {
			float: left;
		}
		
		& when (@arrange = rtl) {
			float: right;
		}
		
		.wrap(@n) {
			@m: @n + 1;
			
			// Wrapped columns
			
			&:nth-child(n+@{m}) {
				padding-top: @gutter;
			}
			
			& when (@compat >= @compat-ie8) {
				
				&.col-last ~ * { // Polyfill class
					padding-top: @gutter;
				}
			}
			
			// Wrapping points
			
			&:nth-child(@{n}n+@{m}) {
				
				& when (@arrange = ltr) {
					clear: left;
				}
				
				& when (@arrange = rtl) {
					clear: right;
				}
			}
			
			& when (@compat >= @compat-ie8) {
				
				&.col-last + .col-first { // Polyfill class
					
					& when (@arrange = ltr) {
						clear: left;
					}
					
					& when (@arrange = rtl) {
						clear: right;
					}
				}
			}
		}
		
		.width(@w) {
			
			& when (isnumber(@w)) {
				width: @w;
				
				& when (ispercentage(@w)) {
					box-sizing: border-box;
				}
				
				& when not(ispercentage(@w)) {
					box-sizing: content-box;
				}
			}
		}
		
		.equal-width(@n) {
			
			& when (@compat < @compat-ie7) {
				.width(100% / @n);
			}
			
			& when not(@compat < @compat-ie7) {
				.width(99.99% / @n); // Avoids columns dropping
			}
		}
		
		// Specific number of columns & width
		
		& when (length(@ncols) > 1) {
			@n: length(@ncols); // A number of columns
			
			.wrap(@n);
			
			// Column width
			
			.for(1; @n); .each(@i) {
				
				&:nth-child(@{n}n+@{i}) {
					.width(extract(@ncols, @i));
				}
			}
		}
		
		// Equal-width columns
		
		& when (length(@ncols) = 1) {
			
			// Specific number of columns
			
			& when (isnumber(@ncols)) {
				.wrap(@ncols);
				.equal-width(@ncols);
			}
			
			// Uncertain number of columns
			
			& when not(isnumber(@ncols)) {
				
				.for(1; 12); .each(@i) { // 1 - 12 columns
					
					&:first-child {
						
						&:nth-last-child(@{i}),
						&:nth-last-child(@{i}) ~ * {
							.equal-width(@i);
						}
					}
				}
			}
		}
	}
}

/**
 * Generates classes: cols-2, cols-3, ... cols-{max-ncols}
 */
.cols-n(@max-ncols: 12) when (@max-ncols > 1) {
	.cols-n(@max-ncols - 1);
	
	.cols-@{max-ncols} {
		.cols(@max-ncols);
	}
}

/**
 * Simple 2-columns
 */
.cols-dyad(@gutter: @base-margin; @inset: auto; @arrange: ltr) {
	.cols(2; @gutter: @gutter; @inset: @inset; @arrange: @arrange);
	
	> .primary { // Wider column
		width: 100% / @phi;
	}
	
	> .secondary { // Thinner column
		width: 100% - (100% / @phi);
	}
}

/**
 * Simple 3-columns
 */
.cols-triad(@gutter: @base-margin; @inset: auto; @arrange: ltr) {
	.cols(3; @gutter: @gutter; @inset: @inset; @arrange: @arrange);
	
	> .primary { // The widest column
		width: 50%;
	}
	
	> .secondary {
		width: 50% / @phi;
	}
	
	> .tertiary { // The thinnest column
		width: 50% / pow(@phi, 2);
	}
}

/**
 * Table
 *
 * @param gutter <length>[ <length>] Gutter width
 * @param inset <length>[ <length>] Inset width
 */
.table(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	display: table;
	direction: @arrange;
	table-layout: @layout;
	
	& when (length(@gutter) = 1) {
		margin: -(@gutter - @inset);
		
		& when (unit(@gutter) = 0) {
			border-collapse: collapse;
		}
		
		& when not(unit(@gutter) = 0) {
			border-collapse: separate;
			border-spacing: @gutter;
		}
	}
	
	& when (length(@gutter) > 1) {
		@gutter-x: extract(@gutter, 1);
		@gutter-y: extract(@gutter, 2);
		
		& when (length(@inset) > 1) {
			@inset-x: extract(@inset, 1);
			@inset-y: extract(@inset, 2);
			margin: -(@gutter-y - @inset-y) -(@gutter-x - @inset-x);
		}
		
		& when (length(@inset) = 1) {
			margin: -(@gutter-y - @inset) -(@gutter-x - @inset);
		}
		
		& when (unit(@gutter-x) = 0) and (unit(@gutter-y) = 0) {
			border-collapse: collapse;
		}
		
		& when not(unit(@gutter-x) = 0) and not(unit(@gutter-y) = 0) {
			border-collapse: separate;
			border-spacing: @gutter-x @gutter-y;
		}
	}
}

/**
 * Horizontal Cells
 */
.h-cells(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	.table(@gutter: @gutter; @inset: @inset; @arrange: @arrange; @layout: @layout);
	
	> * { // Cell
		display: table-cell;
		direction: initial;
	}
}

/**
 * Cell Table
 */
.cell-table(@gutter: @base-margin; @inset: 0; @arrange: ltr; @layout: fixed) {
	.table(@gutter: @gutter; @inset: @inset; @arrange: @arrange; @layout: @layout);
	
	> * { // Row
		display: table-row;
		
		> * { // Cell
			display: table-cell;
			direction: initial;
		}
	}
}
