/**
 * Blessing / Methods / Division
 */

@import (reference) "variables.less";

.clearfix() {
	
	&:after {
		content: @char-whitespace;
		clear: both;
		visibility: hidden;
		display: block;
		height: 0;
		overflow: hidden;
	}
	
	& when (@compat > @compat-ie8) {
		zoom: 1;
	}
}

.clearfix-alt() {
	overflow: hidden;
	width: 100%;
}

.cols(@ncols: uncertain; @arrange: ltr) {
	.clearfix;
	
	& when (isnumber(@ncols)) {
		
		> * {
			
			& when (@compat < @compat-ie7) {
				width: 100% / @ncols;
			}
			
			& when not(@compat < @compat-ie7) {
				width: 99.9999% / @ncols; // Avoid columns dropping
			}
			
			@x: @ncols + 1;
			&:nth-child(@{ncols}n+@{x}) {
				
				& when (@arrange = ltr) {
					clear: left;
				}
				
				& when (@arrange = rtl) {
					clear: right;
				}
			}
		}
		
		.span-n(@ncols - 1);
		
		.span-n(@span) when (@span > 1) {
			.span-n(@span - 1);
			
			> .span-@{span} {
				
				& when (@compat < @compat-ie7) {
					width: (100% / @ncols) * @span;
				}
				
				& when not(@compat < @compat-ie7) {
					width: (99.9999% / @ncols) * @span;
				}
			}
		}
	}
	
	& when not(isnumber(@ncols)) { // Uncertain of a number of columns
		
		> * {
			.col(12);
			
			.col(@max-ncols: 12) when (@max-ncols > 1) {
				.col(@max-ncols - 1);
				
				&:first-child {
					
					&:nth-last-child(@{max-ncols}),
					&:nth-last-child(@{max-ncols}) ~ * {
						
						& when (@compat < @compat-ie7) {
							width: 100% / @max-ncols;
						}
						
						& when not(@compat < @compat-ie7) {
							width: 99.9999% / @max-ncols;
						}
					}
				}
			}
		}
	}
	
	> * {
		position: relative;
		display: block;
		min-height: 1px;
		
		& when (@arrange = ltr), (@arrange = left-to-right) {
			float: left;
		}
		
		& when (@arrange = rtl), (@arrange = right-to-left) {
			float: right;
		}
	}
	
	> li {
		list-style: none;
	}
}

/**
 * Generates classes: cols-2, cols-3, ... cols-{max-ncols}
 */
.cols-n(@max-ncols: 12) when (@max-ncols > 1) {
	.cols-n(@max-ncols - 1);
	
	.cols-@{max-ncols} {
		.cols(@max-ncols);
	}
}

.cols-dyad(@w1: auto; @w2: auto; @gutter: @base-margin; @arrange: ltr) {
	.cols (@arrange: @arrange);
	
	> * {
		
		&:first-child,
		&:nth-child(odd) {
			width: @w1;
		}
		
		&:last-child,
		&:nth-child(even) {
			width: @w2;
		}
	}
}
.-2-cols (
		@w1: auto,
		@w2: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when (@arrange = ltr) {
	
	> * {
		@x: @gutter / 2;
		
		&:first-child,
		&:nth-child(odd) {
			margin-right: @x;
		}
		
		&:last-child,
		&:nth-child(even) {
			margin-left: @x;
		}
	}
}
.-2-cols (
		@w1: auto,
		@w2: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when (@arrange = rtl) {
	
	> * {
		@x: @gutter / 2;
		
		&:first-child,
		&:nth-child(odd) {
			margin-right: @x;
		}
		
		&:last-child,
		&:nth-child(even) {
			margin-left: @x;
		}
	}
}

/*
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr) {
	
	display: block;
	.clearfix;
	
	> * {
		display: block;
		min-height: 1px; // Prevents collapsing width while no any content in the column.
		.-naked;
		
		> .content {
			display: block;
			margin: 0;
			.-h-padding(@gutter / 2);
		}
	}
}
// ## 2 columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-num-cols = 2) {
	
	> * {
		width: 100% / 2;
		
		&:first-child,
		&:nth-child(odd) {
			
			> * {
				margin-right: @gutter / 2;
			}
			
			> .content {
				.-h-padding(0, @gutter / 2);
			}
		}
		
		&:last-child,
		&:nth-child(even) {
			
			> * {
				margin-left: @gutter / 2;
			}
			
			> .content {
				.-h-padding(@gutter / 2, 0);
			}
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
}
// ## 3 columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-num-cols = 3) {
	
	> * {
		width: 100% / 3;
		
		> .content {
			.-h-padding(@gutter / 3);
		}
		
		&:first-child,
		&:nth-child(3n-1) {
			> .content {
				.-h-padding(0, @gutter * 2 / 3);
			}
		}
		
		&:last-child,
		&:nth-child(3n+1) {
			> .content {
				.-h-padding(@gutter * 2 / 3, 0);
			}
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}	
}
// ## Equal-height columns
.cols(
		@-num-cols: auto,
		@-cols-height-equation: auto,
		@gutter: @base-margin,
		@arrange: ltr)
		when(@-cols-height-equation = equal) {
	
	> * {
		height: 100%;
		
		> .content {
			height: 100%;
		}
	}
}
// ## Arrange columns as left to right
.cols(@-num-cols: auto, @-cols-height-equation: auto, @gutter: @base-margin,
		@arrange: ltr) when (@arrange = ltr) {
	
	> * {
		float: left;
	}
}
// ## Arrange columns as right to left
.cols(@-num-cols: auto, @-cols-height-equation: auto, @gutter: @base-margin,
		@arrange: ltr) when (@arrange = rtl) {
	
	> * {
		float: right;
	}
}
// Compatible with lte IE 7 & gt IE 6
.cols(@gutter: @base-margin, @-direction: left, @-compatibility: @compat) when (@-compatibility >= @compat-ie7), (@-compatibility < @compat-ie6) {
	
	&.dyad > * {
		
		&.first-child > .content {
			.-h-padding(0, @gutter / 2);
		}
		
		&.last-child > .content {
			.-h-padding(@gutter / 2, 0);
		}
	}
	
	&.triad > * {
		
		&.first-child > .content {
			.-h-padding(0, @gutter * 2 / 3);
		}
		
		&.last-child > .content {
			.-h-padding(@gutter * 2 / 3, 0);
		}
	}
}
// Compatible with lte IE 6
.cols(@gutter: @base-margin, @-direction: left, @-compatibility: @compat) when (@-compatibility >= @compat-ie6) {
	
	.col {
		display: block;
		float: @-direction;
		min-height: 1px;
		
		.content {
			display: block;
			.-h-padding(@gutter / 2);
		}
	}
	
	&.dyad .col {
		width: 100% / 2;
		
		&.first-child .content {
			.-h-padding(0, @gutter / 2);
		}
		
		&.last-child .content {
			.-h-padding(@gutter / 2, 0);
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
	
	&.triad .col {
		width: 100% / 3;
		
		.content {
			.-h-padding(@gutter / 3);
		}
		
		&.first-child .content {
			.-h-padding(0, @gutter * 2 / 3);
		}
		
		&.last-child .content {
			.-h-padding(@gutter * 2 / 3, 0);
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}
}

.-rows(@gutter: @base-margin) {
	display: block;
	
	> .cell,
	> .row {
		display: block;
		min-width: 1px;
		
		> .content {
			display: block;
			position: absolute;
			top: 0;
			bottom: 0;
			.-v-padding(@gutter / 2);
		}
	}
	
	&.dyad > .cell,
	&.dyad > .row {
		width: 100% / 2;
		
		&:first-child > .content {
			.-v-padding(0, @gutter / 2);
		}
		
		&:last-child > .content {
			.-v-padding(@gutter / 2, 0);
		}
		
		&.primary {
			width: 100% * @ratio-gold;
		}
		
		&.secondary {
			width: 100% * (1.0 - @ratio-gold);
		}
	}
	
	&.triad > .cell,
	&.triad > .row {
		width: 100% / 3;
		
		> .content {
			.-v-padding(@gutter / 3);
		}
		
		&:first-child > .content {
			.-v-padding(0, @gutter * 2 / 3);
		}
		
		&:last-child > .content {
			.-v-padding(@gutter * 2 / 3, 0);
		}
		
		&.primary {
			width: 100% * 0.5;
		}
		
		&.secondary {
			width: 100% * 0.31;
		}
		
		&.tertiary {
			width: 100% * 0.19;
		}
	}
}

// ## Horizontal array
.-h-array(@-num-items, @-item-margin: 0) {
	display: block;
	.clearfix;
	
	> * {
		display: block;
		float: left;
		width: 100% / @-num-items;
		
		> .content {
			padding-left: @-item-margin / 2;
			padding-right: @-item-margin / 2;
		}
	}
}

// ## Table 
*/
