/*
Layout

styleguide: mixins.layout
*/

/*
.dim

Sets up dimensions.

less:
.a-box {
	.dim(480px 320px);
}
---
// Singular value means both of width and height
.a-box {
	.dim(32px);
}

@metrics: <length[*]> - A list of dimension property values

styleguide: mixins.layout.dim
*/
.dim(@metrics) {

	& when (length(@metrics) = 1) {
		width: @metrics;
		height: @metrics;
	}

	& when (length(@metrics) >= 2) {
		width: extract(@metrics, 1);
		height: extract(@metrics, 2);
	}
}

/*
.pos

Sets up positioning properties.

less:
.a-box {
	.pos(8px 16px);
}
---
// Relative positioning
.a-box {
	.pos(8px 16px; relative);
}
---
// Positioning from right
.a-box {
	.pos(8px 16px; ""; right);
}

@offsets: <length>* - A list of positioning offsets
@method: <position> [""] - The positioning method
@from: <side>* [left top] - The coordinate system

styleguide: mixins.layout.pos
*/
.pos(@offsets; @method: ""; @from: left top) {

	& when not(@method = "") {
		position: @method;
	}

	& when (length(@offsets) = 1) {
		.pos(@offsets @offsets; @method; @from);
	}

	& when (length(@from) = 1) {

		& when (@from = left), (@from = right) {
			.pos(@offsets; @method; @from top);
		}

		& when (@from = top), (@from = bottom) {
			.pos(@offsets; @method; left @from);
		}
	}

	& when (length(@offsets) >= 2) and (length(@from) >= 2) {
		@v1: extract(@offsets, 1);
		@v2: extract(@offsets, 2);
		@p1: extract(@from, 1);
		@p2: extract(@from, 2);

		@{p1}: @v1;
		@{p2}: @v2;
	}
}

/*
.m

Sets up margins.

This is the alias of [`.box(margin; @sides; @values)`](#kssref-mixins-layout.box)

less:
.a-box {
	.m(x; 2px); // "x" or "h" means "horizontal"
	.m(y; 3px); // "y" or "v" means "vertical"
}
---
.a-box {
	.m(x; 2px 3px); // Left and right separately
	.m(y; 5px 7px); // Top and bottom separately
}
---
.a-box {
	.m(top left; 2px); // Specific sides
	.m(right bottom; 3px 5px); // Specific sides & values
}
---
.a-box {
	.m(-top; 11px); // All sides except "top"
}

@sides: <side>* | x | y | h | v - Sides of the box to apply margin
@values: <length>* - Margin values

styleguide: mixins.layout.m
*/
.m(@sides; @values) {
	.box(margin; @sides; @values);
}

/*
.p

Sets up paddings.

This is the alias of [`.box(padding; @sides; @values)`](#kssref-mixins-layout.box)

less:
.a-box {
	.p(x; 2px); // "x" or "h" means "horizontal"
	.p(y; 3px); // "y" or "v" means "vertical"
}
---
.a-box {
	.p(x; 2px 3px); // Left and right separately
	.p(y; 5px 7px); // Top and bottom separately
}
---
.a-box {
	.p(top left; 2px); // Specific sides
	.p(right bottom; 3px 5px); // Specific sides & values
}
---
.a-box {
	.p(-top; 11px); // All sides except "top"
}

@sides: <side>* | x | y | h | v - Sides of the box to apply padding
@values: <length>* - Padding values

styleguide: mixins.layout.p
*/
.p(@sides; @values) {
	.box(padding; @sides; @values);
}

/*
.b

Sets up borders.

This is the alias of [`.box(border; @sides; @values)`](#kssref-mixins-layout.box)

less:
.a-box {
	.b(x; e("2px dashed Tomato")); // "x" or "h" means "horizontal"
	.b(y; e("3px dotted Orange")); // "y" or "v" means "vertical"
}
---
.a-box {
	.m(x; 2px dashed SkyBlue, 3px dashed SeaGreen); // Left and right separately
	.m(y; 5px dotted Olive, 7px dotted Orchid);     // Top and bottom separately
}

@sides: <side>* | x | y | h | v - Sides of the box to apply border
@values: <length>* - Border values

styleguide: mixins.layout.b
*/
.b(@sides; @values) {
	.box(border; @sides; @values);
}

/*
.b (+Property)

Sets up borders' width, style, color.

This is the alias of [`.box(border; @sides; @values; @prop)`](#kssref-mixins-layout.box)

less:
.a-box {
	.b(width; x; 2px); // "x" or "h" means "horizontal"
	.b(width; y; 3px); // "y" or "v" means "vertical"
}
---
.a-box {
	.b(style; x; dashed dotted); // Left and right separately
	.b(style; y; dotted dashed); // Top and bottom separately
}
---
.a-box {
	.b(color; top left; DarkSlateGray);           // Specific sides
	.b(color; right bottom; Amethyst Aquamarine); // Specific sides & values
}
---
.a-box {
	.b(width; -top; 11px); // All sides except "top"
}

@prop: width | style | color - The border property to set up
@sides: <side>* | -<side> | x | y | h | v - Sides of the box to set up
@values: <border-@{prop}>* - Values to apply for border property

styleguide: mixins.layout.b-property
*/
.b(@prop; @sides; @values) {
	.box(border; @sides; @values; @prop);
}

/*
.box

Sets up box model properties (padding, border, margin).

This mixin is complex and thus you type a lot. So we recommend for using following mixins instead.
These mixins invoke `.box` internally but need less parameters.
+ [`.m` (For margins)](#kssref-mixins-layout.m)
+ [`.p` (For paddings)](#kssref-mixins-layout.p)
+ [`.b` (For borders)](#kssref-mixins-layout.b)

@area: margin | padding | border - The area to set up
@sides: <side>* | -<side> | x | y | h | v - Sides of the box to set up
<ul>
	<li>`x` = `h` = `left right`</li>
	<li>`y` = `v` = `top bottom`</li>
	<li>`-<side>` means "All sides except it."<br>Ex. `-top` = `right bottom left`</li>
</ul>
@values: <@{area}>* | <border-@{prop}>* - Values for box model properties
@prop: "" | width | style | color [""] - Border property (Only if `@area` = `border`)

styleguide: mixins.layout.box
*/
.box(@area; @sides; @values; @prop: "") {
	@nsides: length(@sides);

	& when (@nsides = 1) {

		& when (@sides = x), (@sides = h) {
			.box(@area; left right; @values; @prop);
		}

		& when (@sides = y), (@sides = v) {
			.box(@area; top bottom; @values; @prop);
		}

		& when (@sides = -top) {
			.box(@area; right bottom left; @values; @prop);
		}

		& when (@sides = -right) {
			.box(@area; top bottom left; @values; @prop);
		}

		& when (@sides = -bottom) {
			.box(@area; top right left; @values; @prop);
		}

		& when (@sides = -left) {
			.box(@area; top right bottom; @values; @prop);
		}

		& when (@sides = top), (@sides = right), (@sides = bottom), (@sides = left) {

			& when (@prop = "") {
				@{area}-@{sides}: @values;
			}

			& when not(@prop = "") {
				@{area}-@{sides}-@{prop}: @values;
			}
		}
	}

	& when (@nsides > 1) {
		@nvalues: length(@values);

		.for(@sides; {
			.each(@i; @item) {

				& when (@nvalues < @nsides) {
					.box(@area; @item; @values; @prop);
				}

				& when (@nvalues >= @nsides) {
					.box(@area; @item; extract(@values, @i); @prop);
				}
			}
		});
	}
}

/*
.center

Centers a box.

styleguide: mixins.layout.center
*/
.center(@dim; @offsets: 0 0; @method: absolute) {

	& when (length(@dim) > 1) {
		@w: extract(@dim, 1);
		@h: extract(@dim, 2);
		position: @method;

		& when (length(@offsets) > 1) {
			.center(x; @w; extract(@offsets, 1); "");
			.center(y; @h; extract(@offsets, 2); "");
		}

		& when (length(@offsets) = 1) {
			.center(x; @w; @offsets; "");
			.center(y; @h; @offsets; "");
		}
	}

	& when (length(@dim) = 1) and (isnumber(@dim)) {
		.center(@dim @dim; @offsets; @method);
	}
}

/*
.center (+Axis)

Centers a box.

less:
.a-box {
	.center(x; 12px);
}
---
@compat: @compat-ie8;
.a-box {
	.center(x; 12px);
}
.b-box {
	.center(x; 50%);
}

@axis x | y | h | v - The axis of centering
@dim <length> - Width or height of the box to be centered
@offset <length> [0] - Offset for centering
@method <position> [absolute] - Centering method

styleguide: mixins.layout.center-axis
*/
.center(@axis; @dim; @offset: 0; @method: absolute) when not(isnumber(@axis)) {
	@hdim: @dim * .5;
	@udim: unit(@dim);
	@uoffset: unit(@offset);

	& when not(@method = "") {
		position: @method;
	}

	.set1(@p1: width; @p2: left) {
		@{p1}: @dim;

		& when (@compat < @compat-ie8) { // Can use calc()

			& when (unit(@offset) = 0) {
				@{p2}: e('calc(50% - @{hdim})');
			}

			& when not(unit(@offset) = 0) {
				@{p2}: e('calc(50% - @{hdim} + @{offset})');
			}
		}

		& when (@compat >= @compat-ie8) { // Cannot use calc()

			& when (ispercentage(@dim)) { // Fluid width
				@pos: (100% - @dim) * .5;

				& when (ispercentage(@offset)) { // Fluid offset
					@{p2}: @pos + @offset;
				}

				& when not(ispercentage(@offset)) { // Solid offset
					@{p2}: @pos;
					margin-@{p2}: @offset;
				}
			}

			& when not(ispercentage(@dim)) { // Solid width
				@{p2}: 50%;

				& when (@uoffset = @udim) { // Same unit offset
					margin-@{p2}: -@hdim + @offset;
				}

				& when not(@uoffset = @udim) { // Different unit offset
					margin-@{p2}: -@hdim + convert(@offset, @udim);
				}
			}
		}
	}

	& when (@axis = x), (@axis = h) { // Horizontal centering
		.set1(width; left);
	}

	& when (@axis = y), (@axis = v) { // Vertical centering
		.set1(height; top);
	}
}

/*
.valign

Aligns child elements vertically.

Reference: https://css-tricks.com/centering-in-the-unknown/

less:
.a-box {
	.valign(middle); // Centers child elements vertically
}

@align: <vertical-align> - Vertical alignment rule

styleguide: mixins.layout.valign
*/
.valign(@align) {
	font-size: 0; // Remove gaps between child elements

	.prepend(inline-block; {
		width: 0;
		height: 100%;
		vertical-align: @align;
	});

	> * {
		.display(inline-block);
		vertical-align: @align;
		font-size: initial;
	}
}

/*
.cover

styleguide: mixins.layout.cover
*/
.cover() {
	display: block;
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	box-sizing: content-box;
}
