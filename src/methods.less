/**
 * Blessing / Methods
 */

@import "methods.selector.less";
@import "methods.wrapper.less";
@import "methods.development.less";

/**
 * Originate
 * Resets positioning properties.
 */
.origin() {
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}

/**
 * Positioning
 *
 * @param x <length>                         Horizontal offset
 * @param y <length>                         Vertical offset
 * @param from <direction> (default:tl)      Offset origin
 * @param method <position> (default:@empty) Positioning method
 *
 * # Example(s)
 * .pos(1px; 2px); // Positioning from top-left
 * ---------------
 * left: 1px;
 * top: 2px;
 *
 * .pos(1px; 2px; r); // Positioning from top-right
 * -------------------
 * right: 1px;
 * top: 2px;
 *
 * .pos(1px; 2px; br; absolute); // Absolute positioning from bottom-right
 * -----------------------------
 * right: 1px;
 * bottom: 2px;
 * position: absolute;
 */
.pos(@x; @y; @from: tl; @method: @empty) {
	
	& when (@from = tl), (@from = t), (@from = l) {
		left: @x;
		top: @y;
	}
	
	& when (@from = tr), (@from = r) {
		right: @x;
		top: @y;
	}
	
	& when (@from = bl), (@from = b) {
		left: @x;
		bottom: @y;
	}
	
	& when (@from = br) {
		right: @x;
		bottom: @y;
	}
	
	& when not(@method = @empty) {
		position: @method;
	}
}

/**
 * Dimension
 *
 * @param w <length> Width
 * @param h <length> Height
 *
 * # Example(s)
 * .dim(480px; 320px);
 * -------------------
 * width: 480px;
 * height: 320px;
 */
.dim(@w; @h) {
	width: @w;
	height: @h;
}

/**
 * Dimension (square)
 *
 * @param wh <length> Width & height
 *
 * # Example(s)
 * .dim(16px);
 * -----------
 * width: 16px;
 * height: 16px;
 */
.dim(@wh) {
	.dim(@wh; @wh);
}

/**
 * Horizontal Margin
 */
.mgn-x(@l; @r) {
	margin-left: @l;
	margin-right: @r;
}

/**
 * Horizontal Margin (same on both sides)
 */
.mgn-x(@lr) {
	.mgn-x(@lr; @lr);
}

/**
 * Vertical Margin
 */
.mgn-y(@t; @b) {
	margin-top: @t;
	margin-bottom: @b;
}

/**
 * Vertical Margin (same on both sides)
 */
.mgn-y(@tb) {
	.mgn-y(@tb; @tb);
}

/**
 * Alignment
 *
 * # Example(s)
 * .align(l); // Left-align
 * ----------
 * margin-left: 0;
 * margin-right: auto;
 *
 * .align(r; 12px); // Right-align with an offset
 * ----------------
 * margin-left: auto;
 * margin-right: 12px;
 *
 * .align(c); // Center-align
 * ----------
 * margin-left: auto;
 * margin-right: auto;
 */
.align(@with; @offset: 0) {
	
	& when (@with = l), (@with = left) {
		.mgn-x(@offset; auto);
	}
	
	& when (@with = r), (@with = right) {
		.mgn-x(auto; @offset);
	}
	
	& when (@with = c), (@with = center) {
		.mgn-x(auto);
	}
}

/**
 * Horizontal Padding
 */
.pad-x(@l, @r) {
	padding-left: @l;
	padding-right: @r;
}

/**
 * Horizontal Padding (same on both sides)
 */
.pad-x(@lr) {
	.pad-x(@lr, @lr);
}

/**
 * Vertical Padding
 */
.pad-y(@t, @b) {
	padding-top: @t;
	padding-bottom: @b;
}

/**
 * Vertical Padding (same on both sides)
 */
.pad-y(@tb) {
	.pad-y(@tb, @tb);
}

.bdr-x(@l, @r) {
	border-left: @l;
	border-right: @r;
}
.bdr-x(@lr) {
	.bdr-x(@lr, @lr);
}

.bdr-y(@t, @b) {
	border-top: @t;
	border-bottom: @b;
}
.bdr-y(@tb) {
	.bdr-y(@tb, @tb);
}

.bdr-x-width(@l, @r) {
	border-left-width: @l;
	border-right-width: @r;
}
.bdr-x-width(@lr) {
	.bdr-x-width(@lr, @lr);
}

.bdr-y-width(@t, @b) {
	border-top-width: @t;
	border-bottom-width: @b;
}
.bdr-y-width(@tb) {
	.bdr-y-width(@tb, @tb);
}

.bdr-x-style(@l, @r) {
	border-left-style: @l;
	border-right-style: @r;
}
.bdr-x-style(@lr) {
	.bdr-x-style(@lr, @lr);
}

.bdr-y-style(@t, @b) {
	border-top-style: @t;
	border-bottom-style: @b;
}
.bdr-y-style(@tb) {
	.bdr-y-style(@tb, @tb);
}

.bdr-x-color(@l, @r) {
	border-left-color: @l;
	border-right-color: @r;
}
.bdr-x-color(@lr) {
	.bdr-x-color(@lr, @lr);
}

.bdr-y-color(@t, @b) {
	border-top-color: @t;
	border-bottom-color: @b;
}
.bdr-y-color(@tb) {
	.bdr-y-color(@tb, @tb);
}

.bdr-radius(@dir; @radius) {
	
	& when (@dir = t) {
		border-top-left-radius: @radius;
		border-top-right-radius: @radius;
	}
	
	& when (@dir = r) {
		border-top-right-radius: @radius;
		border-bottom-right-radius: @radius;
	}
	
	& when (@dir = b) {
		border-bottom-left-radius: @radius;
		border-bottom-right-radius: @radius;
	}
	
	& when (@dir = l) {
		border-top-left-radius: @radius;
		border-bottom-left-radius: @radius;
	}
}

/**
 * Bare
 * Strip off margins, paddings and borders.
 *
 * @param side <side> (default:all) The side to be stripped off
 */
.bare(@side: all) {
	
	& when (@side = all) {
		margin: 0;
		padding: 0;
		border-width: 0;
	}
	
	& when (@side = l) {
		margin-left: 0;
		padding-left: 0;
		border-left-width: 0;
	}
	
	& when (@side = r) {
		margin-right: 0;
		padding-right: 0;
		border-right-width: 0;
	}
	
	& when (@side = t) {
		margin-top: 0;
		padding-top: 0;
		border-top-width: 0;
	}
	
	& when (@side = b) {
		margin-bottom: 0;
		padding-bottom: 0;
		border-bottom-width: 0;
	}
}

/**
 * Horizontal Bare
 * Strip off horizontal margins, paddings and borders.
 */
.bare-x() {
	.bare(l);
	.bare(r);
}

/**
 * Vertical Bare
 * Strip off vertical margins, paddings and borders.
 */
.bare-y() {
	.bare(t);
	.bare(b);
}

/**
 * Horizontal Centering
 *
 * @param w <length>      The width of the element to be centered
 * @param offset <length>
 */
.center-x(@w; @offset: 0) {
	position: absolute;
	width: @w;
	
	& when (ispercentage(@w)) { // For flexible height
		left: (100% - @w) * .5;
	}
	
	& when not(ispercentage(@w)) { // For fixed height
		left: 50%;
		margin-left: (-@w * .5) + @offset;
	}
}

/**
 * Vertical Centering
 *
 * @param h <length>      The height of the element to be centered
 * @param offset <length>
 */
.center-y(@h; @offset: 0) {
	position: absolute;
	height: @h;
	
	& when (ispercentage(@h)) { // For flexible height
		top: (100% - @h) * .5;
	}
	
	& when not(ispercentage(@h)) { // For fixed height
		top: 50%;
		margin-top: (-@h * .5) + @offset;
	}
}

.layer(@z-index: auto) {
	display: block;
	position: absolute;
	z-index: @z-index;
	.origin;
	.dim(100%);
	.bare;
	#css3 > .box-sizing(border-box);
}

.maximise-x(@proportional: true) {
	width: 100%;
	max-height: 100%;
	
	& when (@proportional) {
		height: auto;
	}
}

.maximise-y(@proportional: true) {
	height: 100%;
	max-width: 100%;
	
	& when (@proportional) {
		width: auto;
	}
}

.nowrap(@overflow: visible; @ellipsis: ellipsis) {
	white-space: nowrap;
	overflow: @overflow;
}

/**
 * Prefixise
 * Add vendor-prefixes to a property.
 *
 * @param prop <property> The property to be prefixised
 * @param value <any>     The value of the property
 * @param prefixes
 */
.prefix(@prop; @value; @prefixes: moz, webkit, o, ms) {
	
	& when (@uses-vendor-prefixes) {
		
		.for-each(@prefixes; {
			-@{each}-@{prop}: @value;
		});
	}
	
	@{prop}: @value;
}

/**
 * For-Each Loop
 * Iterates a list of values.
 * You can refer each values of @list as the variable: @each inside the @ruleset.
 *
 * # Example(s)
 * .for-each(top, right, bottom; {
 *     margin-@{each}: 1em;
 * });
 * -------------------------------
 * margin-top: 1em;
 * margin-right: 1em;
 * margin-bottom: 1em;
 *
 * @param list <any>[, <any>[, ...]] Comma or space separated values
 * @param ruleset <ruleset>          The ruleset to apply in the loop
 */
.for-each(@list; @ruleset) {
	.loop(1);
	.loop(@i) when (@i <= length(@list)) {
		@each: extract(@list, @i);
		@ruleset();
		.loop(@i + 1);
	}
}

/**
 * Iteration Loop
 *
 * @param from <integer>
 * @param to <integer>
 * @param ruleset <ruleset>
 * @param step <integer> [default: 1]
 */
.iterate(@from; @to; @ruleset; @step: 1) {
	.loop(@from);
	.loop(@i) when (@i <= @to) {
		@ruleset();
		.loop(@i + @step);
	}
}

@import "methods.division.less";
@import "methods.gui.less";
@import "methods.component.less";
@import "methods.animation.less";
