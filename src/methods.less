/**
 * Blessing / Methods
 */

@import "variables.less";
@import "methods.wrapper.less";

/**
 * Originate
 */
.origin() {
	left: 0;
	right: 0;
	top: 0;
	bottom: 0;
}

/**
 * Positioning
 *
 * @param x			Horizontal offset
 * @param y			Vertical offset
 * @param from		(default:lt) lt | rt | lb | rb
 * @param method	(default:@empty)
 * @param z			(default:@empty)
 *
 * # Example(s)
 * .pos(1px; 2px); // Positioning from left-top
 * ---------------
 * left: 1px;
 * right: 2px;
 *
 * .pos(1px; 2px; rb); // Positioning from right-bottom
 * -------------------
 * right: 1px;
 * bottom: 2px;
 *
 * .pos(1px; 2px; rb; absolute); // Absolute positioning from right-bottom
 * -----------------------------
 * right: 1px;
 * bottom: 2px;
 * position: absolute;
 */
.pos(@x; @y; @from: lt; @method: @empty; @z: @empty) {
	
	& when (@from = lt), (@from = left-top), (@from = l), (@from = left), (@from = t), (@from = top) {
		left: @x;
		top: @y;
	}
	
	& when (@from = rt), (@from = right-top), (@from = r), (@from = right) {
		right: @x;
		top: @y;
	}
	
	& when (@from = lb), (@from = left-bottom), (@from = b), (@from = bottom) {
		left: @x;
		bottom: @y;
	}
	
	& when (@from = rb), (@from = right-bottom) {
		right: @x;
		bottom: @y;
	}
	
	& when not(@method = @empty) {
		position: @method;
	}
	
	& when not(@z = @empty) {
		z-index: @z;
	}
}

/**
 * Dimension
 *
 * @param w		Width
 * @param h		Height
 *
 * # Example(s)
 * .dim(480px; 320px);
 * -------------------
 * width: 480px;
 * height: 320px;
 */
.dim(@w; @h) {
	width: @w;
	height: @h;
}

/**
 * Dimension (square)
 *
 * @param wh	Width & height
 *
 * # Example(s)
 * .dim(16px);
 * -----------
 * width: 16px;
 * height: 16px;
 */
.dim(@wh) {
	.dim(@wh; @wh);
}

/**
 * Horizontal Margin
 */
.mgn-x(@l; @r) {
	margin-left: @l;
	margin-right: @r;
}

/**
 * Horizontal Margin (same on both sides)
 */
.mgn-x(@lr) {
	.mgn-x(@lr; @lr);
}

/**
 * Vertical Margin
 */
.mgn-y(@t; @b) {
	margin-top: @t;
	margin-bottom: @b;
}

/**
 * Vertical Margin (same on both sides)
 */
.mgn-y(@tb) {
	.mgn-y(@tb; @tb);
}

/**
 * Alignment
 *
 * # Example(s)
 * .align(l); // Left-align
 * ----------
 * margin-left: 0;
 * margin-right: auto;
 *
 * .align(r; 12px); // Right-align with an offset
 * ----------------
 * margin-left: auto;
 * margin-right: 12px;
 *
 * .align(c); // Center-align
 * ----------
 * margin-left: auto;
 * margin-right: auto;
 */
.align(@with; @offset: 0) {
	
	& when (@with = l), (@with = left) {
		.mgn-x(@offset; auto);
	}
	
	& when (@with = r), (@with = right) {
		.mgn-x(auto; @offset);
	}
	
	& when (@with = c), (@with = center) {
		.mgn-x(auto);
	}
}

.pad-x(@l, @r) {
	padding-left: @l;
	padding-right: @r;
}
.pad-x(@lr) {
	.pad-x(@lr, @lr);
}

.pad-y(@t, @b) {
	padding-top: @t;
	padding-bottom: @b;
}
.pad-y(@tb) {
	.pad-y(@tb, @tb);
}

.bdr-x(@l, @r) {
	border-left: @l;
	border-right: @r;
}
.bdr-x(@lr) {
	.bdr-x(@lr, @lr);
}

.bdr-y(@t, @b) {
	border-top: @t;
	border-bottom: @b;
}
.bdr-y(@tb) {
	.bdr-y(@tb, @tb);
}

.bdr-x-width(@l, @r) {
	border-left-width: @l;
	border-right-width: @r;
}
.bdr-x-width(@lr) {
	.bdr-x-width(@lr, @lr);
}

.bdr-y-width(@t, @b) {
	border-top-width: @t;
	border-bottom-width: @b;
}
.bdr-y-width(@tb) {
	.bdr-y-width(@tb, @tb);
}

.bdr-x-style(@l, @r) {
	border-left-style: @l;
	border-right-style: @r;
}
.bdr-x-style(@lr) {
	.bdr-x-style(@lr, @lr);
}

.bdr-y-style(@t, @b) {
	border-top-style: @t;
	border-bottom-style: @b;
}
.bdr-y-style(@tb) {
	.bdr-y-style(@tb, @tb);
}

.bdr-x-color(@l, @r) {
	border-left-color: @l;
	border-right-color: @r;
}
.bdr-x-color(@lr) {
	.bdr-x-color(@lr, @lr);
}

.bdr-y-color(@t, @b) {
	border-top-color: @t;
	border-bottom-color: @b;
}
.bdr-y-color(@tb) {
	.bdr-y-color(@tb, @tb);
}

.strip(@dir: all) {
	
	& when (@dir = all) {
		margin: 0;
		padding: 0;
		border-width: 0;
	}
	
	& when (@dir = l), (@dir = left) {
		margin-left: 0;
		padding-left: 0;
		border-left-width: 0;
	}
	
	& when (@dir = r), (@dir = right) {
		margin-right: 0;
		padding-right: 0;
		border-right-width: 0;
	}
	
	& when (@dir = t), (@dir = top) {
		margin-top: 0;
		padding-top: 0;
		border-top-width: 0;
	}
	
	& when (@dir = b), (@dir = bottom) {
		margin-bottom: 0;
		padding-bottom: 0;
		border-bottom-width: 0;
	}
}

.strip-x() {
	.strip(l);
	.strip(r);
}

.strip-y() {
	.strip(t);
	.strip(b);
}

//// Complex layout methods

.vertical-centered-block(@height) {
	display: block;
	position: absolute;
	height: @height;
}
.vertical-centered-block(@height) when (ispercentage(@height)) { // For flexible height
	top: (100 - @height) / 2;
}
.vertical-centered-block(@height) when not (ispercentage(@height)) { // For fixed height
	top: 50%;
	margin-top: -(@height / 2);
}

//// Other utilities

.layer(@z-index: auto) {
	display: block;
	position: absolute;
	z-index: @z-index;
	.origin;
	.dim(100%);
	.strip;
	#css3 > .box-sizing(border-box);
}

.clipper() {
	display: block;
	overflow: hidden;
	white-space: nowrap;
}

.layouter() {
	position: relative;
	
	> * {
		position: absolute;
	}
}
.layouter {.layouter}

.l-aligner {
	text-align: left;
	
	* {
		
	}
}

.r-aligner {
	text-align: right;
}

.c-aligner {
	text-align: center;
}

.block,
.l-aligned-block,
.r-aligned-block,
.c-aligned-block {
	display: block;
}

.l-aligner *,
.l-aligned-block {
	margin-left: 0;
	margin-right: auto;
}

.r-aligner *,
.r-aligned-block {
	margin-left: auto;
	margin-right: 0;
}

.c-aligner *,
.c-aligned-block {
	margin-left: auto;
	margin-right: auto;
}

.stretcher *,
.h-stretcher *,
.v-stretcher * {
	display: block;
	padding: 0;
}

.stretcher * {
	width: 100%;
	height: 100%;
}

.h-stretcher * {
	width: 100%;
	max-height: 100%;
}

.v-stretcher * {
	max-width: 100%;
	height: 100%;
}

.nowrap() {
	overflow: visible;
	white-space: nowrap;
}

@import "methods.division.less";
@import "methods.gui.less";
@import "methods.sfx.less";
@import "methods.component.less";
@import "methods.development.less";
